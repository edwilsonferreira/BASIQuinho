# Generated from BASIQuinho.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,16,108,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,5,11,68,8,11,10,11,12,
        11,71,9,11,1,12,4,12,74,8,12,11,12,12,12,75,1,12,1,12,4,12,80,8,
        12,11,12,12,12,81,3,12,84,8,12,1,13,1,13,5,13,88,8,13,10,13,12,13,
        91,9,13,1,13,1,13,1,14,3,14,96,8,14,1,14,1,14,3,14,100,8,14,1,15,
        4,15,103,8,15,11,15,12,15,104,1,15,1,15,1,89,0,16,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        48,57,3,0,10,10,13,13,34,34,2,0,9,9,32,32,115,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,
        0,0,3,35,1,0,0,0,5,37,1,0,0,0,7,39,1,0,0,0,9,41,1,0,0,0,11,43,1,
        0,0,0,13,45,1,0,0,0,15,47,1,0,0,0,17,49,1,0,0,0,19,55,1,0,0,0,21,
        61,1,0,0,0,23,65,1,0,0,0,25,73,1,0,0,0,27,85,1,0,0,0,29,99,1,0,0,
        0,31,102,1,0,0,0,33,34,5,61,0,0,34,2,1,0,0,0,35,36,5,44,0,0,36,4,
        1,0,0,0,37,38,5,43,0,0,38,6,1,0,0,0,39,40,5,45,0,0,40,8,1,0,0,0,
        41,42,5,42,0,0,42,10,1,0,0,0,43,44,5,47,0,0,44,12,1,0,0,0,45,46,
        5,40,0,0,46,14,1,0,0,0,47,48,5,41,0,0,48,16,1,0,0,0,49,50,5,73,0,
        0,50,51,5,78,0,0,51,52,5,80,0,0,52,53,5,85,0,0,53,54,5,84,0,0,54,
        18,1,0,0,0,55,56,5,80,0,0,56,57,5,82,0,0,57,58,5,73,0,0,58,59,5,
        78,0,0,59,60,5,84,0,0,60,20,1,0,0,0,61,62,5,76,0,0,62,63,5,69,0,
        0,63,64,5,84,0,0,64,22,1,0,0,0,65,69,7,0,0,0,66,68,7,1,0,0,67,66,
        1,0,0,0,68,71,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,24,1,0,0,0,
        71,69,1,0,0,0,72,74,7,2,0,0,73,72,1,0,0,0,74,75,1,0,0,0,75,73,1,
        0,0,0,75,76,1,0,0,0,76,83,1,0,0,0,77,79,5,46,0,0,78,80,7,2,0,0,79,
        78,1,0,0,0,80,81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,84,1,0,0,
        0,83,77,1,0,0,0,83,84,1,0,0,0,84,26,1,0,0,0,85,89,5,34,0,0,86,88,
        8,3,0,0,87,86,1,0,0,0,88,91,1,0,0,0,89,90,1,0,0,0,89,87,1,0,0,0,
        90,92,1,0,0,0,91,89,1,0,0,0,92,93,5,34,0,0,93,28,1,0,0,0,94,96,5,
        13,0,0,95,94,1,0,0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,100,5,10,0,0,
        98,100,5,59,0,0,99,95,1,0,0,0,99,98,1,0,0,0,100,30,1,0,0,0,101,103,
        7,4,0,0,102,101,1,0,0,0,103,104,1,0,0,0,104,102,1,0,0,0,104,105,
        1,0,0,0,105,106,1,0,0,0,106,107,6,15,0,0,107,32,1,0,0,0,9,0,69,75,
        81,83,89,95,99,104,1,6,0,0
    ]

class BASIQuinhoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    INPUT = 9
    PRINT = 10
    LET = 11
    ID = 12
    NUMBER = 13
    STRING = 14
    NEWLINE = 15
    WS = 16

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "','", "'+'", "'-'", "'*'", "'/'", "'('", "')'", "'INPUT'", 
            "'PRINT'", "'LET'" ]

    symbolicNames = [ "<INVALID>",
            "INPUT", "PRINT", "LET", "ID", "NUMBER", "STRING", "NEWLINE", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "INPUT", "PRINT", "LET", "ID", "NUMBER", "STRING", 
                  "NEWLINE", "WS" ]

    grammarFileName = "BASIQuinho.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


